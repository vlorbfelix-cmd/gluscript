local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
 
local Window = Rayfield:CreateWindow({
   Name = "Demonfall made by GLU",
   LoadingTitle = "Glu is GOATED",
   LoadingSubtitle = "by Glu",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Example Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = False, -- Set this to true to use our key system
   KeySettings = {
      Title = "Key | Youtube Hub",
      Subtitle = "Key System",
      Note = "Key In Discord Server",
      FileName = "YoutubeHubKey1", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://pastebin.com/raw/AtgzSPWK"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})
 
local MainTab = Window:CreateTab("üè† Home", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")
 
Rayfield:Notify({
   Title = "You executed the script",
   Content = "Very cool gui",
   Duration = 5,
   Image = 13047715178,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("The user tapped Okay!")
      end
   },
},
})
 
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
 
local Window = Rayfield:CreateWindow({
   Name = "Demonfall made by GLU",
   LoadingTitle = "Glu is GOATED",
   LoadingSubtitle = "by Glu",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil,
      FileName = "Example Hub"
   },
   Discord = {Enabled = false, Invite = "noinvitelink", RememberJoins = true},
   KeySystem = false,
})
 
local MainTab = Window:CreateTab("üè† Home", nil)
local MainSection = MainTab:CreateSection("Main")
 
-- =========================
-- Universal Health Display (Players, Bosses, Enemies)
-- =========================
local SeeHealthActive = false
local tracked = {}
 
local SeeHealthButton = MainTab:CreateButton({
    Name = "See All Health",
    Callback = function()
        local Workspace = game:GetService("Workspace")
 
        if SeeHealthActive then
            -- Turn off: cleanup
            for target, data in pairs(tracked) do
                if data.billboard then data.billboard:Destroy() end
                if data.conn then data.conn:Disconnect() end
            end
            tracked = {}
            SeeHealthActive = false
            game.StarterGui:SetCore("SendNotification", {
                Title = "Health Tracker",
                Text = "Health display disabled!",
                Duration = 3
            })
            return
        end
 
        SeeHealthActive = true
 
        local function createHealthUI(target)
            if tracked[target] then return end
            local healthValue = target:FindFirstChild("Health")
            if not healthValue or not healthValue:IsA("NumberValue") then return end
 
            -- Adornee: try Head > HumanoidRootPart > PrimaryPart > fallback to target
            local adornee = target:FindFirstChild("Head") or target:FindFirstChild("HumanoidRootPart")
            if not adornee and target:IsA("Model") and target.PrimaryPart then
                adornee = target.PrimaryPart
            end
            if not adornee then return end
 
            -- BillboardGui
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "HealthUI"
            billboard.Adornee = adornee
            billboard.Size = UDim2.new(0, 200, 0, 50)
            billboard.StudsOffset = Vector3.new(0, 5, 0)
            billboard.AlwaysOnTop = true
            billboard.Parent = adornee
 
            -- Text
            local text = Instance.new("TextLabel")
            text.Size = UDim2.new(1, 0, 1, 0)
            text.BackgroundTransparency = 1
            text.TextColor3 = Color3.fromRGB(255, 255, 255)
            text.TextScaled = true
            text.Font = Enum.Font.SourceSansBold
            text.Text = target.Name .. ": " .. tostring(healthValue.Value)
            text.Parent = billboard
 
            -- Update function
            local function updateHealth()
                if not SeeHealthActive then return end
                local current = healthValue.Value
                text.Text = target.Name .. " ‚ù§Ô∏è " .. tostring(current)
            end
 
            updateHealth()
            local conn = healthValue:GetPropertyChangedSignal("Value"):Connect(updateHealth)
 
            tracked[target] = {billboard = billboard, conn = conn}
        end
 
        -- Function to scan enemies specifically
        local function scanEnemies()
            local enemyFolder = Workspace:FindFirstChild("Enemy")
            if enemyFolder then
                for _, enemy in ipairs(enemyFolder:GetChildren()) do
                    if enemy:FindFirstChild("Health") then
                        createHealthUI(enemy)
                    end
                end
                enemyFolder.ChildAdded:Connect(function(enemy)
                    if SeeHealthActive and enemy:FindFirstChild("Health") then
                        createHealthUI(enemy)
                    end
                end)
            end
        end
 
        -- Scan whole workspace (for NPCs, Bosses, Players)
        for _, obj in ipairs(Workspace:GetDescendants()) do
            if obj:FindFirstChild("Health") and obj.Health:IsA("NumberValue") then
                createHealthUI(obj)
            end
        end
 
        -- Explicitly scan enemies
        scanEnemies()
 
        game.StarterGui:SetCore("SendNotification", {
            Title = "Health Tracker",
            Text = "Now showing health for Players, Bosses, and Enemies!",
            Duration = 5
        })
    end,
})
-- ======================================
-- Kokushibo Health Tracker Button Only
-- ======================================
local KokushiboHealthActive = false
local kokushiboBillboard
 
local KokushiboHealthButton = MainTab:CreateButton({
    Name = "See Kokushibo Health",
    Callback = function()
        if KokushiboHealthActive then
            if kokushiboBillboard then kokushiboBillboard:Destroy() end
            KokushiboHealthActive = false
            game.StarterGui:SetCore("SendNotification", {
                Title = "Kokushibo Tracker",
                Text = "Disabled!",
                Duration = 3
            })
            return
        end
 
        KokushiboHealthActive = true
        local boss = workspace:WaitForChild("KokushiboRaid")
        local healthValue = boss:WaitForChild("Health")
 
        -- BillboardGui
        kokushiboBillboard = Instance.new("BillboardGui")
        kokushiboBillboard.Adornee = boss:FindFirstChild("Head") or boss
        kokushiboBillboard.Size = UDim2.new(0, 200, 0, 50)
        kokushiboBillboard.StudsOffset = Vector3.new(0, 8, 0)
        kokushiboBillboard.AlwaysOnTop = true
        kokushiboBillboard.Parent = boss
 
        local bg = Instance.new("Frame")
        bg.Size = UDim2.new(1, 0, 1, 0)
        bg.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        bg.Parent = kokushiboBillboard
 
        local bar = Instance.new("Frame")
        bar.Size = UDim2.new(1, 0, 1, 0)
        bar.BackgroundColor3 = Color3.fromRGB(200, 0, 200)
        bar.Parent = bg
 
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 1, 0)
        label.BackgroundTransparency = 1
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.TextScaled = true
        label.Font = Enum.Font.SourceSansBold
        label.Text = "Kokushibo: " .. tostring(healthValue.Value)
        label.Parent = bg
 
        healthValue.Changed:Connect(function()
            local current = tonumber(healthValue.Value) or 0
            local maxHealth = 10000 -- adjust this if Kokushibo has higher max HP
            local percent = math.clamp(current / maxHealth, 0, 1)
            bar.Size = UDim2.new(percent, 0, 1, 0)
            label.Text = "Kokushibo: " .. tostring(current)
        end)
 
        game.StarterGui:SetCore("SendNotification", {
            Title = "Kokushibo Tracker",
            Text = "Enabled! Tracking Kokushibo Health",
            Duration = 5
        })
    end,
})
-- ======================================
-- ShinobuRaid Health UI Button
-- ======================================
local SeeShinobuButton = MainTab:CreateButton({
    Name = "See ShinobuRaid Health",
    Callback = function()
        local npc = workspace:WaitForChild("ShinobuRaid")
        local head = npc:WaitForChild("Head")
        local healthValue = npc:WaitForChild("Health")
        local maxHealth = 10000

        -- Toggle off if exists
        if head:FindFirstChild("ShinobuBillboard") then
            head.ShinobuBillboard:Destroy()
            game.StarterGui:SetCore("SendNotification", {
                Title = "Shinobu Tracker",
                Text = "Health UI removed!",
                Duration = 3
            })
            return
        end

        -- BillboardGui
        local billboard = Instance.new("BillboardGui")
        billboard.Name = "ShinobuBillboard"
        billboard.Adornee = head
        billboard.Size = UDim2.new(4, 0, 1, 0)
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true
        billboard.Parent = head

        -- Bar background
        local bg = Instance.new("Frame")
        bg.Size = UDim2.new(1, 0, 0.2, 0)
        bg.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        bg.BorderSizePixel = 0
        bg.Parent = billboard

        -- Health bar
        local bar = Instance.new("Frame")
        bar.Size = UDim2.new(1, 0, 1, 0)
        bar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        bar.BorderSizePixel = 0
        bar.Parent = bg

        -- Text
        local txt = Instance.new("TextLabel")
        txt.Size = UDim2.new(1, 0, 3, 0)
        txt.Position = UDim2.new(0, 0, -2.5, 0)
        txt.BackgroundTransparency = 1
        txt.TextColor3 = Color3.fromRGB(255, 255, 255)
        txt.Font = Enum.Font.SourceSansBold
        txt.TextScaled = true
        txt.Parent = billboard

        -- Update function
        local function update()
            local hp = healthValue.Value
            local pct = math.clamp(hp / maxHealth, 0, 1)
            bar.Size = UDim2.new(pct, 0, 1, 0)

            if pct > 0.5 then
                bar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            elseif pct > 0.2 then
                bar.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
            else
                bar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            end

            txt.Text = "ShinobuRaid: " .. math.floor(hp) .. "/" .. maxHealth
        end

        healthValue:GetPropertyChangedSignal("Value"):Connect(update)
        update()

        game.StarterGui:SetCore("SendNotification", {
            Title = "Shinobu Tracker",
            Text = "Health UI enabled!",
            Duration = 3
        })
    end,
})

-- ======================================
-- RengokuRaid Health UI Button
-- ======================================
local SeeRengokuButton = MainTab:CreateButton({
    Name = "See RengokuRaid Health",
    Callback = function()
        local npc = workspace:WaitForChild("RengokuRaid")
        local head = npc:WaitForChild("Head")
        local healthValue = npc:WaitForChild("Health")
        local maxHealth = 10000

        -- Toggle off if exists
        if head:FindFirstChild("RengokuBillboard") then
            head.RengokuBillboard:Destroy()
            game.StarterGui:SetCore("SendNotification", {
                Title = "Rengoku Tracker",
                Text = "Health UI removed!",
                Duration = 3
            })
            return
        end

        -- BillboardGui
        local billboard = Instance.new("BillboardGui")
        billboard.Name = "RengokuBillboard"
        billboard.Adornee = head
        billboard.Size = UDim2.new(4, 0, 1, 0)
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true
        billboard.Parent = head

        -- Bar background
        local bg = Instance.new("Frame")
        bg.Size = UDim2.new(1, 0, 0.2, 0)
        bg.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        bg.BorderSizePixel = 0
        bg.Parent = billboard

        -- Health bar
        local bar = Instance.new("Frame")
        bar.Size = UDim2.new(1, 0, 1, 0)
        bar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        bar.BorderSizePixel = 0
        bar.Parent = bg

        -- Text
        local txt = Instance.new("TextLabel")
        txt.Size = UDim2.new(1, 0, 3, 0)
        txt.Position = UDim2.new(0, 0, -2.5, 0)
        txt.BackgroundTransparency = 1
        txt.TextColor3 = Color3.fromRGB(255, 255, 255)
        txt.Font = Enum.Font.SourceSansBold
        txt.TextScaled = true
        txt.Parent = billboard

        -- Update function
        local function update()
            local hp = healthValue.Value
            local pct = math.clamp(hp / maxHealth, 0, 1)
            bar.Size = UDim2.new(pct, 0, 1, 0)

            if pct > 0.5 then
                bar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            elseif pct > 0.2 then
                bar.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
            else
                bar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            end

            txt.Text = "RengokuRaid: " .. math.floor(hp) .. "/" .. maxHealth
        end

        healthValue:GetPropertyChangedSignal("Value"):Connect(update)
        update()

        game.StarterGui:SetCore("SendNotification", {
            Title = "Rengoku Tracker",
            Text = "Health UI enabled!",
            Duration = 3
        })
    end,
})
 
-- See Yoriichi Health UI Button
local SeeYoriichiButton = MainTab:CreateButton({
    Name = "See Yoriichi Health",
    Callback = function()
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local playerGui = player:WaitForChild("PlayerGui")
 
        -- Check if the GUI already exists
        if playerGui:FindFirstChild("YoriichiHealthUI") then
            playerGui.YoriichiHealthUI:Destroy()
            game.StarterGui:SetCore("SendNotification", {
                Title = "Yoriichi Tracker",
                Text = "Health UI removed!",
                Duration = 3
            })
            return
        end
 
        -- Create ScreenGui
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "YoriichiHealthUI"
        screenGui.Parent = playerGui
 
        -- Create Frame
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(0, 200, 0, 50)
        frame.Position = UDim2.new(0.5, -100, 0, 50)
        frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        frame.BorderSizePixel = 0
        frame.Parent = screenGui
 
        -- Create HealthBar
        local healthBar = Instance.new("Frame")
        healthBar.Size = UDim2.new(1, -4, 1, -4)
        healthBar.Position = UDim2.new(0, 2, 0, 2)
        healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        healthBar.BorderSizePixel = 0
        healthBar.Parent = frame
 
        -- Create TextLabel for health value
        local healthText = Instance.new("TextLabel")
        healthText.Size = UDim2.new(1, 0, 1, 0)
        healthText.BackgroundTransparency = 1
        healthText.TextColor3 = Color3.fromRGB(255, 255, 255)
        healthText.Font = Enum.Font.SourceSansBold
        healthText.TextSize = 20
        healthText.Parent = frame
 
        -- Reference to Yoriichi's Health
        local npcHealth = workspace:WaitForChild("Yoriichi"):WaitForChild("Health")
 
        -- Update function
        local function updateHealth()
            local healthValue = npcHealth.Value -- Make sure this is a NumberValue
            local maxHealth = 10000
            local healthPercent = math.clamp(healthValue / maxHealth, 0, 1)
 
            healthBar.Size = UDim2.new(healthPercent, -4, 1, -4)
            if healthPercent > 0.5 then
                healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            elseif healthPercent > 0.2 then
                healthBar.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
            else
                healthBar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            end
 
            healthText.Text = "Yoriichi: "..math.floor(healthValue).."/"..maxHealth
        end
 
        -- Connect to health changes
        npcHealth:GetPropertyChangedSignal("Value"):Connect(updateHealth)
 
        -- Initial update
        updateHealth()
 
        game.StarterGui:SetCore("SendNotification", {
            Title = "Yoriichi Tracker",
            Text = "Health UI enabled!",
            Duration = 3
        })
    end,
})
-- ======================================
-- Enemy Health Tracker Button (Minimal)
-- ======================================
local EnemyHealthActive = false
local enemyBillboards = {}
 
local EnemyHealthButton = MainTab:CreateButton({
    Name = "See Enemy Health",
    Callback = function()
        if EnemyHealthActive then
            -- Turn off: destroy all billboards
            for _, bb in pairs(enemyBillboards) do
                if bb and bb.Parent then
                    bb:Destroy()
                end
            end
            enemyBillboards = {}
            EnemyHealthActive = false
 
            game.StarterGui:SetCore("SendNotification", {
                Title = "Enemy Tracker",
                Text = "Disabled!",
                Duration = 3
            })
            return
        end
 
        EnemyHealthActive = true
 
        -- Setup for all current enemies
        for _, enemy in pairs(workspace:GetChildren()) do
            if enemy.Name == "Enemy" and enemy:FindFirstChild("Health") then
                local head = enemy:FindFirstChild("Head") or enemy
 
                local billboard = Instance.new("BillboardGui")
                billboard.Name = "EnemyHealthBillboard"
                billboard.Adornee = head
                billboard.Size = UDim2.new(0, 100, 0, 20) -- smaller
                billboard.StudsOffset = Vector3.new(0, 4, 0)
                billboard.AlwaysOnTop = true
                billboard.Parent = enemy
 
                local bar = Instance.new("Frame")
                bar.Size = UDim2.new(1, 0, 1, 0)
                bar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                bar.BorderSizePixel = 0
                bar.Parent = billboard
 
                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(1, 0, 1, 0)
                label.BackgroundTransparency = 1
                label.TextColor3 = Color3.fromRGB(255, 255, 255)
                label.TextScaled = true
                label.Font = Enum.Font.SourceSansBold
                label.Text = tostring(enemy.Health.Value)
                label.Parent = billboard
 
                -- Track changes
                enemy.Health.Changed:Connect(function()
                    local current = tonumber(enemy.Health.Value) or 0
                    local maxHealth = 100 -- adjust this for your Enemy max HP
                    local percent = math.clamp(current / maxHealth, 0, 1)
                    bar.Size = UDim2.new(percent, 0, 1, 0)
                    label.Text = tostring(current)
                end)
 
                enemyBillboards[enemy] = billboard
            end
        end
 
        game.StarterGui:SetCore("SendNotification", {
            Title = "Enemy Tracker",
            Text = "Enabled! Tracking all Enemies",
            Duration = 5
        })
    end,
})
 
-- =========================
-- Auto Trinket Farm under See Health
-- =========================
local Trinkets = {"Copper Goblet", "Bronze Jar", "Golden Ring", "Gold Jar"}
local AutoTrinketActive = false
 
local AutoTrinketToggle = MainTab:CreateToggle({
    Name = "Auto Trinket Farm",
    Default = false,
    Callback = function(state)
        AutoTrinketActive = state
    end
})
 
-- AutoFarm loop
game:GetService("RunService").RenderStepped:Connect(function()
    if AutoTrinketActive then
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local hrp = character.HumanoidRootPart
 
            for _, name in ipairs(Trinkets) do
                local model = workspace:FindFirstChild(name)
                if model and model:FindFirstChild("Part") then
                    -- Teleport to the part
                    hrp.CFrame = model.Part.CFrame + Vector3.new(0, 5, 0)
 
                    -- Wait until the part disappears (picked up)
                    repeat
                        wait(0.1)
                    until not model:FindFirstChild("Part") or not AutoTrinketActive
 
                    -- Break to move to next trinket
                    if not AutoTrinketActive then break end
                end
            end
        end
    end
end)
-- ======================================
-- Fly Button
-- ======================================
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
 
local FlyActive = false
local FlyConnection
local Speed = 5 -- adjust fly speed
 
-- Button
local FlyButton = MainTab:CreateButton({
    Name = "Fly",
    Callback = function()
        FlyActive = not FlyActive
 
        if FlyActive then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Fly Mode",
                Text = "Enabled!",
                Duration = 3
            })
 
            local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local hrp = character:WaitForChild("HumanoidRootPart")
 
            FlyConnection = RunService.RenderStepped:Connect(function()
                local moveDir = Vector3.zero
 
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    moveDir = moveDir + (workspace.CurrentCamera.CFrame.LookVector)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    moveDir = moveDir - (workspace.CurrentCamera.CFrame.LookVector)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    moveDir = moveDir - (workspace.CurrentCamera.CFrame.RightVector)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    moveDir = moveDir + (workspace.CurrentCamera.CFrame.RightVector)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                    moveDir = moveDir + Vector3.new(0,1,0)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                    moveDir = moveDir + Vector3.new(0,-1,0)
                end
 
                hrp.Velocity = moveDir.Unit * Speed * 20
            end)
        else
            if FlyConnection then
                FlyConnection:Disconnect()
                FlyConnection = nil
            end
 
            local character = LocalPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.Velocity = Vector3.zero
            end
 
            game.StarterGui:SetCore("SendNotification", {
                Title = "Fly Mode",
                Text = "Disabled!",
                Duration = 3
            })
        end
    end,
})
 
-- AutoFarm loop
RunService.RenderStepped:Connect(function()
    if AutoFarmActive then
        local character = LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local hrp = character.HumanoidRootPart
 
            for _, name in ipairs(Trinkets) do
                local model = workspace:FindFirstChild(name)
                if model and model:FindFirstChild("Part") then
                    -- Teleport above the part
                    hrp.CFrame = model.Part.CFrame + Vector3.new(0, 5, 0)
 
                    -- Wait until the part disappears (picked up) or AutoFarm stops
                    repeat
                        task.wait(0.1)
                    until not model:FindFirstChild("Part") or not AutoFarmActive
 
                    if not AutoFarmActive then break end
                end
            end
        end
    end
end)
 
-- =========================
-- NPC Teleport Tab
-- =========================
local NPCTab = Window:CreateTab("üßç NPC Teleport", nil)
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
 
local npcButtons = {} -- store buttons
 
-- Function to create a button for a single NPC
local function createNPCButton(npc)
    if npcButtons[npc.Name] then return end -- already created
 
    local button = NPCTab:CreateButton({
        Name = npc.Name,
        Callback = function()
            local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local hrp = character:WaitForChild("HumanoidRootPart")
 
            if npc:FindFirstChild("Head") then
                hrp.CFrame = npc.Head.CFrame + Vector3.new(0, 3, 0) -- slightly above head
                game.StarterGui:SetCore("SendNotification", {
                    Title = "NPC Teleport",
                    Text = "Teleported to " .. npc.Name,
                    Duration = 3
                })
            end
        end
    })
 
    npcButtons[npc.Name] = button
end
 
-- Create buttons for all existing NPCs
for _, npc in pairs(workspace.Npcs:GetChildren()) do
    createNPCButton(npc)
end
 
-- Auto-add buttons for new NPCs
workspace.Npcs.ChildAdded:Connect(function(npc)
    createNPCButton(npc)
end)
 
-- =========================
-- TP to All NPCs Button
-- =========================
NPCTab:CreateButton({
    Name = "TP to All NPCs",
    Callback = function()
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
 
        for _, npc in pairs(workspace.Npcs:GetChildren()) do
            if npc:FindFirstChild("Head") then
                hrp.CFrame = npc.Head.CFrame + Vector3.new(0, 3, 0)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "NPC Teleport",
                    Text = "Teleported to " .. npc.Name,
                    Duration = 2
                })
                wait(1) -- small delay between NPC teleports
            end
        end
    end
})
 
 
local Input = MainTab:CreateInput({
   Name = "Walkspeed",
   PlaceholderText = "1-500",
   RemoveTextAfterFocusLost = true,
   Callback = function(Text)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Text)
   end,
})
 
local OtherSection = MainTab:CreateSection("Other")
 
local TPTab = Window:CreateTab("üèù Teleports", nil) -- Title, Image
 
-- Keep your existing Raid button
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
 
-- Keep your existing Raid button
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
 
-- =========================
-- Raid Button in TPTab
-- =========================
local Button1 = TPTab:CreateButton({
    Name = "Raid",
    Callback = function()
        local player = LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
 
        -- Your target CFrame
        local raidCFrame = CFrame.new(
            6994.9292, 1767.34619, 1261.29041,
            -0.924331188, 0.135504186, 0.356721729,
            0.0214639902, 0.951809764, -0.305936962,
            -0.380986959, -0.275130421, -0.882695913
        )
 
        hrp.CFrame = raidCFrame
 
        game.StarterGui:SetCore("SendNotification", {
            Title = "Teleport",
            Text = "You have been teleported to the Raid!",
            Duration = 3
        })
    end,
})
 
-- =========================
-- Player Teleport Tab
-- =========================
local PlayerTab = Window:CreateTab("üéÆ Player Teleport", nil)
local playerButtons = {} -- store created buttons
 
-- Function to create a button for a player
local function createPlayerButton(plr)
    if plr == LocalPlayer or playerButtons[plr] then return end -- skip self or already created
 
    local btn = PlayerTab:CreateButton({
        Name = plr.Name,
        Callback = function()
            local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local hrp = character:WaitForChild("HumanoidRootPart")
 
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local targetHRP = plr.Character.HumanoidRootPart
                hrp.CFrame = targetHRP.CFrame + Vector3.new(0, 5, 0)
 
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Player Teleport",
                    Text = "Teleported to " .. plr.Name,
                    Duration = 3
                })
            end
        end
    })
 
    playerButtons[plr] = btn
end
 
-- Add buttons for existing players
for _, plr in pairs(Players:GetPlayers()) do
    createPlayerButton(plr)
end
 
-- Auto-load buttons for new players
Players.PlayerAdded:Connect(function(plr)
    createPlayerButton(plr)
end)
 
-- Remove buttons if a player leaves
Players.PlayerRemoving:Connect(function(plr)
    if playerButtons[plr] then
        -- OrionLib buttons cannot be destroyed directly, but we remove it from tracking
        playerButtons[plr] = nil
    end
end)
 
local TPTab = Window:CreateTab("üé≤ Misc", nil) -- Title, Image
